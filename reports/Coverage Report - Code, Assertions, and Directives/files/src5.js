var g_data = {"name":"design/APB_Assertions/APB_sva.sv","src":"/*  \n    This assertion file follows the **Verification Plan** numbering  \n    Each section corresponds to a specific verification requirement:  \n\n    Example:\n    1- Reset Behavior Verification  \n       - Ensures correct reset values for master and slave. \n\n    2- FSM design vs ARM AMBA APB4 FSM  \n       - 2.2: Transition from IDLE to SETUP  \n         (Ensures proper state transition behavior)  \n\n    The numbers (e.g., 1, 2.2) match the corresponding test items  \n    from the **Verification Plan** for traceability and clarity\n*/\n`include \"apb_defines.svh\" // For macros\nimport shared_pkg::*; // For enums and parameters\n`timescale `TIME_UNIT / `TIME_PRECISION\n\nmodule APB_sva(\n    input PCLK, PRESETn,\n    input SWRITE,\n    input [`APB_DATA_WIDTH-1:0] SWDATA, [`APB_DATA_WIDTH-1:0] PWDATA,\n    input [`APB_ADDR_WIDTH-1:0] SADDR,  [`APB_ADDR_WIDTH-1:0] PADDR,\n    input [`APB_STRB_WIDTH-1:0] SSTRB,  [`APB_STRB_WIDTH-1:0] PSTRB,\n    input [`APB_PROT_WIDTH-1:0] SPROT,  [`APB_PROT_WIDTH-1:0] PPROT,\n    input [`APB_DATA_WIDTH-1:0] PRDATA,\n    input PREADY,PSLVERR, PENABLE, PSEL, PWRITE, transfer,\n    input [1:0] cs,ns\n    );\n    \n    //** 1: Reset Behavior Verification **\\\\\n    property reset_master_check;\n        (!PRESETn) |=> \n                (!PSEL\n                && !PENABLE\n                && !PWRITE\n                && !PADDR\n                && !PWDATA\n                && !PSTRB \n                && !PPROT);\n    endproperty\n    \n    property reset_slave_check;\n        (!PRESETn) |=> (!PSLVERR && !PRDATA);\n    endproperty\n\n    property reset_fsm_check;\n        (!PRESETn) |=> (cs == IDLE);\n    endproperty\n\n    reset_master_assert: assert property (@(posedge PCLK , negedge PRESETn) reset_master_check) \n        else $fatel(\"Reset values for master did not match expected LOW\");\n    \n    reset_slave_assert: assert property (@(posedge PCLK) reset_slave_check) \n        else $fatel(\"Reset values for slave did not match expected LOW\");\n\n    reset_fsm_assert: assert property (@(posedge PCLK , negedge PRESETn) reset_fsm_check) \n        else $fatel(\"Reset value for FSM design did not match expected value IDLE\");\n    \n    //** 2: FSM design vs ARM AMPBA APB4 FSM **\\\\\n    \n    // 2.2: Transition from IDLE to SETUP\n    property idle_to_setup_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            (cs == IDLE && transfer) |=> (cs == SETUP);\n    endproperty\n    \n    property idle_hold_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            (cs == IDLE && !transfer) |=> (cs == IDLE);\n    endproperty\n    \n    idle_to_setup_assert: assert property (idle_to_setup_check) \n        else $error(\"FSM did not transition from IDLE to SETUP correctly when transfer was asserted\");\n    \n    idle_hold_assert: assert property (idle_hold_check) \n        else $error(\"FSM incorrectly left IDLE when transfer was not asserted\");\n    \n    // 2.3: Transition from SETUP to ACCESS\n    property setup_to_access_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            (cs == SETUP) |=> (cs == ACCESS);\n    endproperty\n\n    setup_to_access_assert: assert property (setup_to_access_check)\n        else $error(\"FSM did not transition from SETUP to ACCESS correctly after one clock cycle\");\n\n    // 2.4: Transition from ACESS to SETUP\n    property access_to_setup_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            (cs == ACCESS && PREADY && transfer) |=> (cs == SETUP);\n    endproperty\n\n    property illegal_access_to_setup_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            ((cs == ACCESS) && !(PREADY && transfer))|=> (cs != SETUP);\n    endproperty\n\n    access_to_setup_assert: assert property (access_to_setup_check)\n        else $error(\"FSM did not correctly transition from ACCESS to SETUP when PREADY and transfer were asserted\");\n\n    illegal_access_to_setup_assert: assert property (illegal_access_to_setup_check)\n        else $error(\"FSM incorrectly left ACCESS when either PREADY or transfer was deasserted\");\n\n    // 2.5: Transition from ACCESS to IDLE\n    property access_to_idle_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            (cs == ACCESS && PREADY && !transfer) |=> (cs == IDLE);\n    endproperty\n\n    property illegal_access_to_idle_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            ((cs == ACCESS) && !(PREADY && !transfer))|=> (cs != IDLE);\n    endproperty\n\n    access_to_idle_assert: assert property (access_to_idle_check)\n        else $error(\"FSM did not correctly transition from ACCESS to IDLE when PREADY and transfer were asserted\");\n\n    illegal_access_to_idle_assert: assert property (illegal_access_to_idle_check)\n        else $error(\"FSM incorrectly left ACCESS and went to IDLE when the condition PREADY && !transfer was not HIGH\");\n    \n    // 2.6: Peripheral signals at IDLE state\n    property peripheral_signals_idle_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n         (cs == IDLE) |-> (!PSEL && !PENABLE);\n    endproperty\n\n    peripheral_signals_idle_assert: assert property (peripheral_signals_idle_check)\n        else $error(\"Failed to deassert PSEL & PENABLE\");\n    \n    // 2.7: Peripheral signals at SETUP state\n    property peripheral_signals_setup_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n         (cs == SETUP) |-> (PSEL\n                            && !PENABLE\n                            && PWRITE == SWRITE\n                            && PADDR  == SADDR\n                            && PWDATA == SWDATA\n                            && PSTRB  == SSTRB\n                            && PPROT  == SPROT);\n    endproperty\n\n    peripheral_signals_setup_assert: assert property (peripheral_signals_setup_check)\n        else $error(\"Failed to verify peripheral signals at SETUP state\");\n    \n    // 2.8: Peripheral signals at ACCESS state\n    property peripheral_signals_access_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            (cs == ACCESS) |-> (PSEL && PENABLE);\n    endproperty\n\n    peripheral_signals_access_assert: assert property (peripheral_signals_access_check)\n        else $error(\"Failed to assert PSEL & PENABLE\");\n    \n    //** Read & Write Operations **\\\\\n\n    // Write Operation\n    property write_op_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n           (cs == ACCESS && SWRITE == `WRITE) |=> (!PSLVERR)\n    endproperty\n    write_op_cover: cover property (write_op_check);\n\n    // Read Operation\n    property read_op_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n        (cs == ACCESS && SWRITE == `READ) |=> (!PSLVERR)\n    endproperty\n    read_op_cover: cover property (read_op_check);\n\n    //** 5: System flags **\\\\\n\n    // 5.3: Peripheral Ready Signal\n    property pready_check;\n        @(posedge PCLK) disable iff (!PRESETn)\n            (PSEL && PENABLE) |-> (PREADY);\n    endproperty\n\n    pready_assert: assert property (pready_check)\n        else $error(\"Error: Failed to assert PREADY\");\nendmodule","lang":"verilog"};
processSrcData(g_data);