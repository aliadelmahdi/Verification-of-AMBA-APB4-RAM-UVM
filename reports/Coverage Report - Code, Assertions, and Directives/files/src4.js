var g_data = {"name":"./design/APB_design/APB_Slave.v","src":"`ifndef APB_SLAVE_V\n`define APB_SLAVE_V\n\nmodule APB_Slave #(\n        parameter MEM_WIDTH = `MEM_WIDTH, \n        parameter MEM_DEPTH = `MEM_DEPTH\n    ) (\n        input PSEL, PENABLE, PWRITE,  \n        input [`APB_ADDR_WIDTH-1:0] PADDR, \n        input [`APB_DATA_WIDTH-1:0] PWDATA,\n        input [`APB_STRB_WIDTH-1:0] PSTRB,\n        input [`APB_PROT_WIDTH-1:0] PPROT,\n        input PCLK, PRESETn,\n        output reg [`APB_DATA_WIDTH-1:0] PRDATA,\n        output PREADY,\n        output reg PSLVERR\n    );\n    // Define memory using the MEM_WIDTH and MEM_DEPTH from `defines`\n    reg [MEM_WIDTH-1:0] Cache [MEM_DEPTH-1:0];\n\n    always @ (posedge PCLK) begin\n        if (~PRESETn) begin\n            PSLVERR <= 0;\n            PRDATA <= 0;\n        end\n        else if (PSEL) begin  // Access state when PSEL is high\n            // Writing stage\n            if (PWRITE) begin     \n              case (PSTRB)\n                4'b0001: Cache[PADDR] <= {{24{PWDATA[7]}}, PWDATA[7:0]}; // Store the least significant byte (sb)\n                4'b0010: Cache[PADDR] <= {{24{PWDATA[15]}}, PWDATA[15:8], 8'h00}; // Store the second byte with zeroes in the least 8 bits\n                4'b0011: Cache[PADDR] <= {{16{PWDATA[15]}}, PWDATA[15:0]}; // Store the least significant half-word (sh)\n                4'b0100: Cache[PADDR] <= {{24{PWDATA[23]}}, PWDATA[23:16], 8'h00}; // Store the third byte with zeroes in the least 8 bits\n                4'b0101: Cache[PADDR] <= {{16{PWDATA[23]}}, PWDATA[23:16], 8'h00, PWDATA[7:0]}; // Store the third and least significant bytes with zeroes\n                4'b0110: Cache[PADDR] <= {{8{PWDATA[23]}}, PWDATA[23:8], 8'h00}; // Store the second and third bytes with zeroes in the least 8 bits\n                4'b0111: Cache[PADDR] <= {{8{PWDATA[23]}}, PWDATA[23:0]}; // Store the least significant three bytes (sh)\n                4'b1000: Cache[PADDR] <= {PWDATA[31:24], 24'h000000}; // Store the most significant byte without sign extension\n                4'b1001: Cache[PADDR] <= {PWDATA[31:24], 16'h0000, PWDATA[7:0]}; // Store the most and least significant bytes without sign extension\n                4'b1010: Cache[PADDR] <= {PWDATA[31:23], 8'h00, PWDATA[15:8], 8'h00}; // Store the most significant half-word with zeroes in the least significant byte if PSTRB[0] == 0\n                4'b1011: Cache[PADDR] <= {PWDATA[31:23], 8'h00, PWDATA[15:0]}; // Store the most significant half-word and the least significant byte, zeroing the middle byte if necessary\n                4'b1100: Cache[PADDR] <= {PWDATA[31:16], 16'h0000}; // Store the most significant and second bytes without sign extension\n                4'b1101: Cache[PADDR] <= {PWDATA[31:16], 8'h00, PWDATA[7:0]}; // Store the most significant three bytes with zeroes in the least 8 bits\n                4'b1110: Cache[PADDR] <= {PWDATA[31:8], 8'h00}; // Store the most significant three bytes with zeroes in the least 8 bits\n                4'b1111: Cache[PADDR] <= PWDATA[31:0]; // Store the full word without sign extension\n                default: Cache[PADDR] <= 32'h00000000; // Default case to handle invalid PSTRB values\n            endcase\n                PSLVERR <= 0;\n            end\n            // Reading stage\n            else begin\n                if (PSTRB != 0)\n                    PSLVERR <= 1;  // PSTRB must remain low when reading\n                else begin\n                    PRDATA <= Cache[PADDR];\n                    PSLVERR <= 0;\n                end\n            end\n        end\n    end\n    assign PREADY = (PSEL && PENABLE) ? 1 : 0; \nendmodule : APB_Slave\n\n`endif // APB_SLAVE_V","lang":"verilog"};
processSrcData(g_data);