var g_data = {"name":"./design/APB_design/APB_Master.v","src":"// // The following `define` are only for convenience and to make the code more readable. \n// `include \"apb_defines.svh\" // For macros\n`ifndef APB_MASTER_SV\n`define APB_MASTER_SV\n\nmodule APB_Master (\n        //the followin signals are from the External System \n        //the system signals names will begin with letter S\n        //note : we will act as the external system in the testbench\n        input SWRITE,\n        input [`APB_ADDR_WIDTH-1:0] SADDR, \n        input [`APB_DATA_WIDTH-1:0] SWDATA, \n        input [`APB_STRB_WIDTH-1:0] SSTRB,\n        input [`APB_PROT_WIDTH-1:0] SPROT,\n        input transfer,   //to indicate the beginning of the transfer\n\n        //the followin signals are Master signals\n        output reg PSEL, PENABLE, PWRITE,\n        output reg [`APB_ADDR_WIDTH-1:0] PADDR,\n        output reg [`APB_DATA_WIDTH-1:0] PWDATA,\n        output reg [`APB_STRB_WIDTH-1:0] PSTRB,\n        output reg [`APB_PROT_WIDTH-1:0] PPROT,\n        input PCLK, PRESETn,\n        input  PREADY,\n        input PSLVERR\n    );\n    //defining our states\n    localparam  IDLE = 2'b00,\n                SETUP = 2'b01,\n                ACCESS = 2'b10;\n    (* fsm_encoding = \"one_hot\" *)\n    reg [1:0] ns, cs ; //next state, current state\n\n    //state memory \n    always @(posedge PCLK, negedge PRESETn)\n    begin\n        if(~PRESETn) \n            cs <= IDLE;\n        else \n            cs <= ns;\n    end\n\n    //next state logic\n    always @(*) begin\n        case(cs)\n            IDLE : begin\n                if(transfer)\n                    ns = SETUP;\n                else\n                    ns = IDLE;\n            end\n            SETUP : ns = ACCESS; //The bus only remains in the SETUP state for one clock cycle and always moves to the ACCESS state on the next rising edge of the clock\n            ACCESS : begin\n                if(PREADY && !transfer)\n                    ns = IDLE;\n                else if(PREADY && transfer)\n                    ns = SETUP;\n                else\n                    ns = ACCESS;\n            end\n            default : ns = IDLE;\n        endcase\n    end\n\n    //output logic\n    always @(*) begin\n        if(~PRESETn)\n            begin\n                PSEL = 0;\n                PENABLE = 0;\n                PWRITE = 0;\n                PADDR = 0;\n                PWDATA = 0;\n                PSTRB = 0;\n                PPROT = 0;\n            end\n        else begin\n            case(cs)\n                IDLE : begin\n                    PSEL = 0;\n                    PENABLE = 0;\n                end\n                SETUP : begin\n                    PSEL = 1;\n                    PENABLE = 0;   //signals are sent to slave in setup state\n                    PWRITE = SWRITE;\n                    PADDR = SADDR;\n                    PWDATA = SWDATA;\n                    PSTRB = SSTRB;\n                    PPROT = SPROT;\n                end\n                ACCESS : begin\n                    PSEL = 1;\n                    PENABLE = 1;\n                end\n            endcase\n        end\n    end\nendmodule : APB_Master\n\n`endif // APB_MASTER_SV","lang":"verilog"};
processSrcData(g_data);